template("run_node") {
  action(target_name) {
    forward_variables_from(invoker, "*")
    script = "js/run_node.py"
  }
}

# Template to generate different V8 snapshots based on different runtime flags.
# Can be invoked with run_mksnapshot(<name>). The target will resolve to
# run_mksnapshot_<name>. If <name> is "default", no file suffixes will be used.
# Otherwise files are suffixed, e.g. embedded_<name>.cc and
# snapshot_blob_<name>.bin.
#
# The template exposes the variables:
#   args: additional flags for mksnapshots
#   embedded_suffix: a camel case suffix for method names in the embedded
#       snapshot.
template("create_snapshot") {
  name = target_name
  suffix = "_$name"
  action("create_snapshot_" + name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "deps",
                           ])
    visibility = [ ":*" ]  # Only targets in this file can depend on this.
    deps += [ ":snapshot_creator" ]
    script = "v8/tools/run.py"
    data = []
    exe = rebase_path(get_label_info(":snapshot_creator", "root_out_dir") +
                      "/snapshot_creator")
    natives_in_bin = "$root_out_dir/natives_blob.bin"
    snapshot_in_bin = "$root_out_dir/snapshot_blob.bin"
    natives_out_cc = "$target_gen_dir/natives${suffix}.cc"
    snapshot_out_cc = "$target_gen_dir/snapshot${suffix}.cc"
    sources = [
      invoker.js,
    ]
    outputs = [
      natives_out_cc,
      snapshot_out_cc,
    ]
    args = [
      exe,
      rebase_path(invoker.js, root_build_dir),
      rebase_path(natives_in_bin, root_build_dir),
      rebase_path(snapshot_in_bin, root_build_dir),
      rebase_path(natives_out_cc, root_build_dir),
      rebase_path(snapshot_out_cc, root_build_dir),
    ]

    # To debug snapshotting problems:
    #  args += ["--trace-serializer"]
    data = [
      invoker.js,
    ]
  }
}

template("rust_crate") {
  name = invoker.crate_name
  crate_type = invoker.crate_type
  source_root = invoker.source_root
  obj = "$target_out_dir/$name.o"
  action(target_name) {
    script = "v8/tools/run.py"
    depfile = "$target_gen_dir/$name.d"
    sources = [
      source_root,
    ]
    outputs = [
      obj,
    ]

    args = [
      "rustc",
      rebase_path(source_root, root_build_dir),
      "--crate-name=$name",
      "--emit=dep-info=" + rebase_path(depfile, root_build_dir),
      "--emit=obj=" + rebase_path(obj, root_build_dir),
      "--crate-type=$crate_type",
    ]

    if (crate_type != "bin") {
      rlib = "$target_out_dir/$name.rlib"
      args += [ "--emit=link=" + rebase_path(rlib, root_build_dir) ]
    }

    if (defined(invoker.extra_flags)) {
      args += invoker.extra_flags
    }

    if (defined(invoker.cfg)) {
      foreach(c, invoker.cfg) {
        args += [
          "--cfg",
          c,
        ]
      }
    }

    deps = []

    if (defined(invoker.rust_deps)) {
      foreach(dep_label, invoker.rust_deps) {
        dep_name = get_label_info(dep_label, "name")
        dep_dir = get_label_info(dep_label, "target_out_dir")
        #dep_obj = "$dep_dir/$dep_name.o"
        #outputs += [ dep_obj ]
        dep_rlib = "$dep_dir/$dep_name.rlib"
        deps += [ dep_label ]
        args += [
          "--extern",
          "$dep_name=" + rebase_path(dep_rlib, root_build_dir),
        ]
      }
    }

    if (is_debug) {
      args += [ "-g" ]
    }
    if (is_official_build) {
      args += [ "-O" ]
    }
  }
}

template("rust_library") {
  rust_crate(target_name) {
    crate_name = target_name
    crate_type = "lib"
    forward_variables_from(invoker, "*")
  }
}

template("rust_executable") {
  crate_name = target_name
  crate_target = target_name + "_crate"
  d = invoker.deps

  rust_crate(crate_target) {
    crate_type = "bin"
    forward_variables_from(invoker, ["source_root", "cfg", "rust_deps"])
    forward_variables_from(invoker, "*")
  }

  rust_objs = get_target_outputs(":" + crate_target)
  if (defined(invoker.rust_deps)) {
    foreach(dep_label, invoker.rust_deps) {
      dep_name = get_label_info(dep_label, "name")
      dep_dir = get_label_info(dep_label, "target_out_dir")
      dep_obj = "$dep_dir/$dep_name.o"
      rust_objs += [ dep_obj ]
    }
  }

  executable(target_name) {
    sources = rust_objs
    deps = [
      ":" + crate_target
    ] + d
  }
}
