template("run_node") {
  action(target_name) {
    forward_variables_from(invoker, "*")
    script = "js/run_node.py"
  }
}

# Template to generate different V8 snapshots based on different runtime flags.
# Can be invoked with run_mksnapshot(<name>). The target will resolve to
# run_mksnapshot_<name>. If <name> is "default", no file suffixes will be used.
# Otherwise files are suffixed, e.g. embedded_<name>.cc and
# snapshot_blob_<name>.bin.
#
# The template exposes the variables:
#   args: additional flags for mksnapshots
#   embedded_suffix: a camel case suffix for method names in the embedded
#       snapshot.
template("create_snapshot") {
  name = target_name
  suffix = "_$name"
  action("create_snapshot_" + name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "deps",
                           ])
    visibility = [ ":*" ]  # Only targets in this file can depend on this.
    deps += [ ":snapshot_creator" ]
    script = "v8/tools/run.py"
    data = []
    exe = rebase_path(get_label_info(":snapshot_creator", "root_out_dir") +
                      "/snapshot_creator")
    natives_in_bin = "$root_out_dir/natives_blob.bin"
    snapshot_in_bin = "$root_out_dir/snapshot_blob.bin"
    natives_out_cc = "$target_gen_dir/natives${suffix}.cc"
    snapshot_out_cc = "$target_gen_dir/snapshot${suffix}.cc"
    sources = [
      invoker.js,
    ]
    outputs = [
      natives_out_cc,
      snapshot_out_cc,
    ]
    args = [
      exe,
      rebase_path(invoker.js, root_build_dir),
      rebase_path(natives_in_bin, root_build_dir),
      rebase_path(snapshot_in_bin, root_build_dir),
      rebase_path(natives_out_cc, root_build_dir),
      rebase_path(snapshot_out_cc, root_build_dir),
    ]

    # To debug snapshotting problems:
    #  args += ["--trace-serializer"]
    data = [
      invoker.js,
    ]
  }
}

template("rust_crate") {
  crate_type = invoker.crate_type
  out_dir = target_out_dir
  source_root = invoker.source_root
  if (crate_type == "bin") {
    output = "$target_out_dir/$target_name"
    out_dir = root_out_dir
  } else if (crate_type == "lib") {
    output = "$target_out_dir/lib$target_name.rlib"
  } else {
    assert(false, "Unsupported crate_type")
  }
  action(target_name) {
    script = "v8/tools/run.py"
    depfile = "$target_gen_dir/$target_name.d"
    sources = [
      source_root,
    ]
    outputs = [
      output,
    ]
    forward_variables_from(invoker, [ "deps" ])
    args = [
      "rustc",
      rebase_path(source_root, root_build_dir),
      "--crate-name=$target_name",
      "--emit=dep-info,link",
      "--crate-type=$crate_type",
      "--cfg",
      "feature=\"default\"",
      "--cfg",
      "feature=\"use_std\"",
      "--out-dir",
      rebase_path(out_dir, root_build_dir),
      "-L",
      "dependency=" + rebase_path(depfile, root_build_dir),
    ]
    if (!defined(deps)) {
      deps = []
    }

    #   --extern libc=$out/liblibc.rlib \
    foreach(dep_label, deps) {
      dep_name = get_label_info(dep_label, "name")
      dep_dir = get_label_info(dep_label, "target_out_dir")
      args += [
        "--extern",
        "$dep_name=" + rebase_path("$dep_dir/lib$dep_name.rlib"),
      ]
    }
    if (defined(invoker.non_rust_deps)) {
      deps += invoker.non_rust_deps
      foreach(dep_label, deps) {
        dep_dir = get_label_info(dep_label, "target_out_dir")
        args += [
          "-L",
          rebase_path(dep_dir),
        ]
      }
    }
    if (is_debug) {
      args += [
        "-C",
        "debuginfo=2",
      ]
    }
    if (is_official_build) {
      args += [
        "-C",
        "opt-level=3"
      ]
    }
  }
}

template("rust_library") {
  rust_crate(target_name) {
    crate_type = "lib"
    forward_variables_from(invoker, "*")
  }
}

template("rust_executable") {
  rust_crate(target_name) {
    crate_type = "bin"
    forward_variables_from(invoker, "*")
  }
}
